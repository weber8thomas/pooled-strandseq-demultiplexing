import subprocess
import os

chroms = ["chr" + str(e) for e in list(range(1,23))]

# folder = "/g/korbel/weber/MosaiCatcher_files/EXTERNAL_DATA/snv_sites_to_genotype/1000G_SNV_with_GT"
folder = "/scratch/tweber/DATA/NYGC_1KGP"
filelist = [e for e in os.listdir(folder) if e.endswith(".vcf.gz")]
header = subprocess.Popen("zcat {folder}/{file} | head -n 5000 | grep -P  '^#CHROM'".format(folder=folder, file=filelist[0]), shell=True, stdout=subprocess.PIPE)
samples = header.communicate()[0].decode("utf-8").strip().split("\t")[9:]
dict_samples = {e:j for j,e in enumerate(samples)}
hgsvc_samples = ["HG00155", "HG00186", "HG00233", "HG00267", "HG00423", "HG00480", "HG00673", "HG00735", "HG00766", "HG01071", "HG01106", "HG01255", "HG01273", "HG01493", "HG01609", "HG01887", "HG01928", "HG01952", "HG01978", "HG02068", "HG02132", "HG02135", "HG02148", "HG02602", "HG02698", "HG02723", "HG02975", "HG03035", "HG03056", "HG03200", "HG03456", "HG03519", "HG03522", "HG03576", "HG03654", "HG03719", "HG03816", "HG03866", "HG03942", "HG03968", "HG04115", "HG04157", "HG04204", "NA10837", "NA10857", "NA18537", "NA18940", "NA18965", "NA19100", "NA19139", "NA19440", "NA19443", "NA19721", "NA19724", "NA19727", "NA19730", "NA19902", "NA20128", "NA20536", "NA20846",]
pool_samples = ["HG00268", "HG00512", "HG00514", "HG00731", "HG01352", "HG02059", "HG02818", "NA12878", "NA19239", "NA19240",]

sample_list = list(set([e for e in samples[:100]] + hgsvc_samples + pool_samples))

def get_mem_mb_heavy(wildcards, attempt):
    """
    To adjust resources in the rules
    attemps = reiterations + 1
    Max number attemps = 8
    """
    mem_avail = [8,16,32,64,128,256]
    return mem_avail[attempt - 1] * 1000


rule all:
    input:
        expand(
            # "{folder}/PANDAS/{chrom}/{sample}.tsv.gz", folder=folder, chrom=chroms, sample=list(set(samples[:100] + ["HG00268","HG00512","HG00514","HG00731","HG01352","HG02059","HG02818","NA12878","NA19239","NA19240"]))
            # "{folder}/PANDAS/{chrom}/{sample}.tsv.gz", folder=folder, chrom=["1"], sample=samples[:2]
            # "{folder}/AGGR/{chrom}.tsv.gz", folder=folder, chrom=chroms
            # "{folder}/AGGR/{chrom}.tsv.gz", folder=folder, chrom=["chr21"],
            # "{folder}/GENOTYPING/HG00512/{chrom}.vcf.gz", folder=folder, chrom=["chr1"]
            # "{folder}/ISEC/{chrom}/HG00512_{sample}", folder=folder, sample=sample_list, chrom=chroms
            "{folder}/ANALYSIS/HG00512.tsv", folder=folder,
        )

# rule retrieve_rare_variants_hail:
#     input:
#         # onekgp= "{folder}/CCDG_14151_B01_GRM_WGS_2020-08-05_chr{chrom}.filtered.shapeit2-duohmm-phased.vcf.gz"
#         # onekgp= "{folder}/20201028_CCDG_14151_B01_GRM_WGS_2020-08-05_{chrom}.recalibrated_variants.vcf.gz"
#         onekgp= "{folder}/CCDG_14151_B01_GRM_WGS_2020-08-05_{chrom}.filtered.shapeit2-duohmm-phased.vcf.gz"
#     output:
#         "{folder}/PANDAS/{chrom}/{sample}.tsv.gz"
#     conda:
#         "hail_env.yaml"
#     envmodules:
#         "Java/1.8.0_221"
#     threads: 16
#     resources:
#         mem_mb=get_mem_mb_heavy,
#         time="01:00:00",
#     script:
#         "hail_processing.py"

rule retrieve_rare_variants_bcftools:
    input:
        # onekgp= "{folder}/CCDG_14151_B01_GRM_WGS_2020-08-05_chr{chrom}.filtered.shapeit2-duohmm-phased.vcf.gz"
        # onekgp= "{folder}/20201028_CCDG_14151_B01_GRM_WGS_2020-08-05_{chrom}.recalibrated_variants.vcf.gz"
        onekgp= "/g/korbel/weber/MosaiCatcher_files/EXTERNAL_DATA/snv_sites_to_genotype/1000G_SNV_with_GT/CCDG_14151_B01_GRM_WGS_2020-08-05_{chrom}.filtered.shapeit2-duohmm-phased.vcf.gz"
    output:
        "{folder}/BCFTOOLS/{chrom}/{sample}.vcf.gz"
    # conda:
    #     "hail_env.yaml"
    envmodules:
        "BCFtools/1.14-GCC-11.2.0"
    threads: 1
    resources:
        mem_mb=get_mem_mb_heavy,
        time="01:00:00",
    params:
        index=lambda wc: dict_samples[wc.sample],
        col_index=lambda wc: dict_samples[wc.sample] + 1 + 9, # +1 for python index +9 for the nine first cols
        af=0.01
    shell:
        # "bcftools view -i 'INFO/AC>0 & INFO/AF<{params.af} & GT[{params.index}]=\"het\"' {input} | cut -f 1-8 | sed '/^#/! s/$/;SAMPLE={wildcards.sample}/' | bgzip > {output}"
        "bcftools view --threads {threads} -i 'INFO/AC>0 & INFO/AF<{params.af} & GT[{params.index}]=\"het\"' {input} | cut -f 1-9,{params.col_index} | bgzip > {output}"

# rule aggregate_hail:
#     input:
#         # expand("{folder}/PANDAS/{chrom}/{sample}.tsv.gz", folder=folder, chrom=["21"], sample=samples[3:6])
#         # expand("{{folder}}/PANDAS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in samples[:100] if e not in ["HG00131"]] + ["HG00268","HG00512","HG00514","HG00731","HG01352","HG02059","HG02818","NA12878","NA19239","NA19240"])))
#         expand("{{folder}}/BCFTOOLS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in samples[:100]] + hgsvc_samples)))
#         # expand("{{folder}}/PANDAS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in esamples[:3]])))
#     output:
#         tsv = "{folder}/AGGR/{chrom}.tsv.gz",
#         vcf = "{folder}/AGGR/{chrom}.vcf"
#     threads: 64
#     resources:
#         mem_mb=get_mem_mb_heavy,
#         time="01:00:00",
#     script:
#         "aggregate.py"

rule aggregate_bcftools:
    input:
        # expand("{folder}/PANDAS/{chrom}/{sample}.tsv.gz", folder=folder, chrom=["21"], sample=samples[3:6])
        # expand("{{folder}}/PANDAS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in samples[:100] if e not in ["HG00131"]] + ["HG00268","HG00512","HG00514","HG00731","HG01352","HG02059","HG02818","NA12878","NA19239","NA19240"])))
        vcf = expand("{{folder}}/BCFTOOLS/{{chrom}}/{sample}.vcf.gz", sample=sample_list),
        index = expand("{{folder}}/BCFTOOLS/{{chrom}}/{sample}.vcf.gz.tbi", sample=sample_list)
        # expand("{{folder}}/PANDAS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in esamples[:3]])))
    output:
        "{folder}/AGGR/{chrom}.vcf.gz"
    envmodules:
        "BCFtools/1.14-GCC-11.2.0"
    threads: 1
    resources:
        mem_mb=get_mem_mb_heavy,
        time="01:00:00",
    shell:
        "bcftools merge {input.vcf} | bcftools sort | bcftools norm -d none -Oz -o {output}"
        # "bcftools concat {input} | bcftools norm -D -Oz -o {output}"

# rule sort_bcftools:
#     input:
#         # expand("{folder}/PANDAS/{chrom}/{sample}.tsv.gz", folder=folder, chrom=["21"], sample=samples[3:6])
#         # expand("{{folder}}/PANDAS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in samples[:100] if e not in ["HG00131"]] + ["HG00268","HG00512","HG00514","HG00731","HG01352","HG02059","HG02818","NA12878","NA19239","NA19240"])))
#         # expand("{{folder}}/BCFTOOLS/{{chrom}}/{sample}.vcf.gz", sample=list(set([e for e in samples[:100]] + hgsvc_samples)))
#         # expand("{{folder}}/PANDAS/{{chrom}}/{sample}.tsv.gz", sample=list(set([e for e in esamples[:3]])))
#         "{folder}/AGGR/{chrom}.raw.vcf.gz"
#     output:
#         "{folder}/AGGR/{chrom}.vcf.gz"
#     envmodules:
#         "BCFtools/1.14-GCC-11.2.0"
#     threads: 1
#     resources:
#         mem_mb=get_mem_mb_heavy,
#         time="01:00:00",
#     shell:
#         "bcftools sort {input} -Oz -o {output}"

# rule sort_vcf:
#     input:
#         "{folder}/AGGR/{chrom}.vcf"
#     output:
#         "{folder}/AGGR/{chrom}.vcf.gz"
#     resources:
#         mem_mb=get_mem_mb_heavy,
#         time="01:00:00",
#     # conda:
#     #     "/g/korbel2/weber/workspace/mosaicatcher-update/workflow/.snakemake/conda/867d15a8cd0124859e2a33263db86483"
#     shell:
#         """
#         cat {input} | awk '$1 ~ /^#/ {print $0;next} {print $0 | "sort -k1,1 -k2,2n"}' | bgzip > {output}
#         """    


rule regenotype_SNVs:
    """
    rule fct:
    input:
    output:
    """
    input:
        bam="/g/korbel/weber/MosaiCatcher_files/POOLING/PSEUDOPOOL/pseudopool/all/HG00512_I_015.sort.mdup.bam",
        bai="/g/korbel/weber/MosaiCatcher_files/POOLING/PSEUDOPOOL/pseudopool/all/HG00512_I_015.sort.mdup.bam.bai",
        sites="{folder}/AGGR/{chrom}.vcf.gz",
        sites_index="{folder}/AGGR/{chrom}.vcf.gz.tbi",
        fasta="/g/korbel2/weber/workspace/mosaicatcher-update/workflow/data/ref_genomes/hg38.fa",
        fasta_index="/g/korbel2/weber/workspace/mosaicatcher-update/workflow/data/ref_genomes/hg38.fa.fai",
    output:
        vcf="{folder}/GENOTYPING/HG00512/{chrom}.vcf.gz",
    resources:
        mem_mb=get_mem_mb_heavy,
        time="10:00:00",
    conda:
        "snp.yaml"
    shell:
        """
        (freebayes \
            -f {input.fasta} \
            -r {wildcards.chrom} \
            -@ {input.sites} \
            --only-use-input-alleles {input.bam} \
            --genotype-qualities \
        | bcftools view \
            --types snps \
            --genotype het \
            -Oz -o {output.vcf})
        """
            

rule isec:
    input:
        vcf="{folder}/GENOTYPING/HG00512/{chrom}.vcf.gz",
        vcf_index="{folder}/GENOTYPING/HG00512/{chrom}.vcf.gz.tbi",
        bcftools="{folder}/BCFTOOLS/{chrom}/{sample}.vcf.gz",
        bcftools_index="{folder}/BCFTOOLS/{chrom}/{sample}.vcf.gz.tbi"
    output:
        isect=directory("{folder}/ISEC/{chrom}/HG00512_{sample}"),
        # t=touch("{folder}/ISECT/{chrom}/HG00512_{sample}.ok")
    conda:
        "snp.yaml"
    threads: 1
    resources:
        mem_mb=get_mem_mb_heavy,
        time="01:00:00",
    shell:
        "bcftools isec -p {output.isect} {input.vcf} {input.bcftools}"

rule analyse_isec:
    input:
        expand("{folder}/ISEC/{chrom}/HG00512_{sample}/0002.vcf", folder=folder, chrom=chroms, sample=sample_list)
    output:
        detailed="{folder}/ANALYSIS/HG00512_detailed.tsv",
        summary="{folder}/ANALYSIS/HG00512_summary.tsv"
    threads: 64
    resources:
        mem_mb=get_mem_mb_heavy,
        time="01:00:00",
    script:
        "gather_isec.py"

# rule freebayes:
#     input:
#         ref="/g/korbel2/weber/workspace/mosaicatcher-update/workflow/data/ref_genomes/hg38.fa",
#         ref_index="/g/korbel2/weber/workspace/mosaicatcher-update/workflow/data/ref_genomes/hg38.fa.fai",
#         # you can have a list of samples here
#         samples="/g/korbel2/weber/MosaiCatcher_files/POOLING/POOLING_POOL3/HGSVCxpool3/all/HGSVCxpool3x01PE20492_sorted_HG00673.sort.mdup.bam",
#         # the matching BAI indexes have to present for freebayes
#         indexes="/g/korbel2/weber/MosaiCatcher_files/POOLING/POOLING_POOL3/HGSVCxpool3/all/HGSVCxpool3x01PE20492_sorted_HG00673.sort.mdup.bam.bai",
#         # optional BED file specifying chromosomal regions on which freebayes
#         # should run, e.g. all regions that show coverage
#         #regions="path/to/region-file.bed"
#         sites="{folder}/AGGR/{chrom}.vcf.gz",
#         sites_index="{folder}/AGGR/{chrom}.vcf.gz.tbi",
#     output:
#         "{folder}/GENOTYPING/HG00673/{chrom}.vcf",  # either .vcf or .bcf
#     log:
#         "{folder}/log/freebayes/HG00673/{chrom}.log",  # either .vcf or .bcf
#     params:
#         extra=lambda wc, input: "-r {chrom} -@ {input} --only-use-input-alleles --genotype-qualities".format(chrom=wc.chrom, input=input.sites),  # optional parameters
#         chunksize=100000,  # reference genome chunk size for parallelization (default: 100000)
#         normalize=False,  # optional flag to use bcftools norm to normalize indels (Valid params are -a, -f, -m, -D or -d)
#     resources:
#         mem_mb=get_mem_mb_heavy,
#         time="10:00:00",
#     threads: 64
#     wrapper:
#         "v1.13.0/bio/freebayes"


# rule bcf_view_o_vcf_gz:
#     input:
#         "{folder}/GENOTYPING/HG00673/{chrom}.vcf.gz",  # either .vcf or .bcf
#     output:
#         "{folder}/BCFTOOLS/HG00673/{chrom}.vcf",  # either .vcf or .bcf
#     log:
#         "{folder}/log/bcftools/HG00673/{chrom}.log",  # either .vcf or .bcf
#     params:
#         extra=lambda wc: "--exclude-uncalled --types snps --genotype hom --include 'QUAL>=10'",
#     # threads: 64
#     resources:
#         mem_mb=get_mem_mb_heavy,
#         time="10:00:00",
#     wrapper:
#         "v1.13.0/bio/bcftools/view"

# rule compress_vcf:
#     input:
#         "{file}.vcf"
#     output:
#         "{file}.vcf.gz"
#     resources:
#         mem_mb=8000,/g/korbel2/weber/workspace/hail
#         time="01:00:00",
#     envmodules:
#         "tabix/0.2.6-GCCcore-11.2.0"
#     shell:
#         "bgzip {input}"

rule index_vcf:
    input:
        "{file}.vcf.gz"
    output:
        "{file}.vcf.gz.tbi"
    resources:
        mem_mb=8000,
        time="01:00:00",
    envmodules:
        "tabix/0.2.6-GCCcore-11.2.0"
    shell:
        "tabix -p vcf {input}"
